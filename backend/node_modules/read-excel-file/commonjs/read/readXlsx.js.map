{"version":3,"sources":["../../source/read/readXlsx.js"],"names":["letters","BUILT_IN_DATE_NUMBER_FORMAT_IDS","readXlsx","contents","xml","options","sheet","filePaths","parseFilePaths","values","sharedStrings","parseValues","styles","parseStyles","properties","parseProperties","getSheets","sheets","map","name","sheetRelationId","_sheet","relationId","createSheetNotFoundError","parseSheet","cells","length","data","dimensions","leftTop","rightBottom","colsCount","column","rowsCount","row","Array","i","j","cell","value","rowMap","dropEmptyRows","dropEmptyColumns","onlyTrimAtTheEnd","transformData","calculateDimensions","comparator","a","b","allRows","sort","allCols","minRow","maxRow","minCol","maxCol","colToInt","col","n","indexOf","CellCoords","coords","split","parseInt","trim","Cell","cellNode","getAttribute","valueElement","textContent","type","hasAttribute","undefined","Error","decodeError","Date","parseFloat","styleId","style","numberFormat","id","dateFormat","template","smartDateParser","isDateTemplate","TypeError","accessor","_","empty","splice","content","createDocument","node","doc","baseStyles","parseCellStyle","numberFormats","parseNumberFormatStyle","reduce","formats","format","getCellStyle","xf","xfId","numFmt","numFmts","numberFormatId","book","workbookProperties","epoch1904","addSheetInfo","push","forEach","document","addFilePathInfo","relationship","filePath","fileType","getFilePath","path","slice","tokens","token","sheetsList","join","errorCode"],"mappings":"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","sourcesContent":["import parseDate from './parseDate'\r\n\r\nimport {\r\n  getSharedStrings,\r\n  getCellValue,\r\n  getCellInlineStringValue,\r\n  getCells,\r\n  getDimensions,\r\n  getBaseStyles,\r\n  getCellStyles,\r\n  getNumberFormats,\r\n  getWorkbookProperties,\r\n  getRelationships,\r\n  getSheets\r\n} from '../xml/xlsx'\r\n\r\n// Maps \"A1\"-like coordinates to `{ row, column }` numeric coordinates.\r\nconst letters = [\"\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\r\n\r\n// https://hexdocs.pm/xlsxir/number_styles.html\r\nconst BUILT_IN_DATE_NUMBER_FORMAT_IDS = [14,15,16,17,18,19,20,21,22,27,30,36,45,46,47,50,57]\r\n\r\n// \"The minimum viable XLSX reader\"\r\n// https://www.brendanlong.com/the-minimum-viable-xlsx-reader.html\r\n\r\n/**\r\n * Reads an (unzipped) XLSX file structure into a 2D array of cells.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @param  {number?} options.sheet - Workbook sheet id (`1` by default).\r\n * @param  {string?} options.dateFormat - Date format, e.g. \"mm/dd/yyyy\". Values having this format template set will be parsed as dates.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @return {object} An object of shape `{ data, cells, properties }`. `data: string[][]` is an array of rows, each row being an array of cell values. `cells: string[][]` is an array of rows, each row being an array of cells. `properties: object` is the spreadsheet properties (e.g. whether date epoch is 1904 instead of 1900).\r\n */\r\nexport default function readXlsx(contents, xml, options = {}) {\r\n  if (!options.sheet) {\r\n    options = {\r\n      sheet: 1,\r\n      ...options\r\n    }\r\n  }\r\n\r\n  // Some Excel editors don't want to use standard naming scheme for sheet files.\r\n  // https://github.com/tidyverse/readxl/issues/104\r\n  const filePaths = parseFilePaths(contents['xl/_rels/workbook.xml.rels'], xml)\r\n\r\n  // Default file path for \"shared strings\": \"xl/sharedStrings.xml\".\r\n  const values = filePaths.sharedStrings\r\n    ? parseValues(contents[filePaths.sharedStrings], xml)\r\n    : []\r\n\r\n  // Default file path for \"styles\": \"xl/styles.xml\".\r\n  const styles = filePaths.styles\r\n    ? parseStyles(contents[filePaths.styles], xml)\r\n    : {}\r\n\r\n  const properties = parseProperties(contents['xl/workbook.xml'], xml)\r\n\r\n  // A feature for getting the list of sheets in an Excel file.\r\n  // https://github.com/catamphetamine/read-excel-file/issues/14\r\n  if (options.getSheets) {\r\n    return properties.sheets.map(({ name }) => ({\r\n      name\r\n    }))\r\n  }\r\n\r\n  // Find the sheet by name, or take the first one.\r\n  let sheetRelationId\r\n  if (typeof options.sheet === 'number') {\r\n    const _sheet = properties.sheets[options.sheet - 1]\r\n    sheetRelationId = _sheet && _sheet.relationId\r\n  } else {\r\n    for (const sheet of properties.sheets) {\r\n      if (sheet.name === options.sheet) {\r\n        sheetRelationId = sheet.relationId\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // If the sheet wasn't found then throw an error.\r\n  // Example: \"xl/worksheets/sheet1.xml\".\r\n  if (!sheetRelationId || !filePaths.sheets[sheetRelationId]) {\r\n    throw createSheetNotFoundError(options.sheet, properties.sheets)\r\n  }\r\n\r\n  // Parse sheet data.\r\n  const sheet = parseSheet(\r\n    contents[filePaths.sheets[sheetRelationId]],\r\n    xml,\r\n    values,\r\n    styles,\r\n    properties,\r\n    options\r\n  )\r\n\r\n  // If the sheet is empty.\r\n  if (sheet.cells.length === 0) {\r\n    if (options.properties) {\r\n      return {\r\n        data: [],\r\n        properties\r\n      }\r\n    }\r\n    return []\r\n  }\r\n\r\n  const [ leftTop, rightBottom ] = sheet.dimensions\r\n\r\n  const colsCount = (rightBottom.column - leftTop.column) + 1\r\n  const rowsCount = (rightBottom.row - leftTop.row) + 1\r\n\r\n  // `sheet.cells` seem to not necessarily be sorted by row and column.\r\n  let data = new Array(rowsCount)\r\n  let i = 0\r\n  while (i < rowsCount) {\r\n    data[i] = new Array(colsCount)\r\n    let j = 0\r\n    while (j < colsCount) {\r\n      data[i][j] = null\r\n      j++\r\n    }\r\n    i++\r\n  }\r\n\r\n  for (const cell of sheet.cells) {\r\n    const row = cell.row - leftTop.row\r\n    const column = cell.column - leftTop.column\r\n    data[row][column] = cell.value\r\n  }\r\n\r\n  // Fill in the row map.\r\n  const { rowMap } = options\r\n  if (rowMap) {\r\n    let i = 0\r\n    while (i < data.length) {\r\n      rowMap[i] = i\r\n      i++\r\n    }\r\n  }\r\n\r\n  data = dropEmptyRows(\r\n    dropEmptyColumns(data, { onlyTrimAtTheEnd: true }),\r\n    { onlyTrimAtTheEnd: true, rowMap }\r\n  )\r\n\r\n  if (options.transformData) {\r\n    data = options.transformData(data)\r\n    // data = options.transformData(data, {\r\n    //   dropEmptyRowsAndColumns(data) {\r\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowMap })\r\n    //   }\r\n    // })\r\n  }\r\n\r\n  if (options.properties) {\r\n    return {\r\n      data,\r\n      properties\r\n    }\r\n  }\r\n\r\n  return data\r\n}\r\n\r\nfunction calculateDimensions (cells) {\r\n  const comparator = (a, b) => a - b\r\n  const allRows = cells.map(cell => cell.row).sort(comparator)\r\n  const allCols = cells.map(cell => cell.column).sort(comparator)\r\n  const minRow = allRows[0]\r\n  const maxRow = allRows[allRows.length - 1]\r\n  const minCol = allCols[0]\r\n  const maxCol = allCols[allCols.length - 1]\r\n\r\n  return [\r\n    { row: minRow, column: minCol },\r\n    { row: maxRow, column: maxCol }\r\n  ]\r\n}\r\n\r\nfunction colToInt(col) {\r\n  // `for ... of ...` would require Babel polyfill for iterating a string.\r\n  let n = 0\r\n  let i = 0\r\n  while (i < col.length) {\r\n    n *= 26\r\n    n += letters.indexOf(col[i])\r\n    i++\r\n  }\r\n  return n\r\n}\r\n\r\nfunction CellCoords(coords) {\r\n  // Examples: \"AA2091\", \"R988\", \"B1\"\r\n  coords = coords.split(/(\\d+)/)\r\n  return [\r\n    // Row.\r\n    parseInt(coords[1]),\r\n    // Column.\r\n    colToInt(coords[0].trim())\r\n  ]\r\n}\r\n\r\n// Example of a `<c/>`ell element:\r\n//\r\n// <c>\r\n//    <f>string</f> — formula.\r\n//    <v>string</v> — formula pre-computed value.\r\n//    <is>\r\n//       <t>string</t> — an `inlineStr` string (rather than a \"common string\" from a dictionary).\r\n//       <r>\r\n//          <rPr>\r\n//            ...\r\n//          </rPr>\r\n//          <t>string</t>\r\n//       </r>\r\n//       <rPh sb=\"1\" eb=\"1\">\r\n//          <t>string</t>\r\n//       </rPh>\r\n//       <phoneticPr fontId=\"1\"/>\r\n//    </is>\r\n//    <extLst>\r\n//       <ext>\r\n//          <!--any element-->\r\n//       </ext>\r\n//    </extLst>\r\n// </c>\r\n//\r\nfunction Cell(cellNode, sheet, xml, values, styles, properties, options) {\r\n  const coords = CellCoords(cellNode.getAttribute('r'))\r\n\r\n  const valueElement = getCellValue(sheet, cellNode)\r\n\r\n  // For `xpath`, `value` can be `undefined` while for native `DOMParser` it's `null`.\r\n  // So using `value && ...` instead of `if (value !== undefined) { ... }` here\r\n  // for uniform compatibility with both `xpath` and native `DOMParser`.\r\n  let value = valueElement && valueElement.textContent\r\n\r\n  let type\r\n  if (cellNode.hasAttribute('t')) {\r\n    type = cellNode.getAttribute('t')\r\n  } else {\r\n    // Default cell type is \"n\" (numeric).\r\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\r\n    type = 'n'\r\n  }\r\n\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    // If the cell contains formula string.\r\n    case 'str':\r\n      value = value.trim()\r\n      if (value === '') {\r\n        value = undefined\r\n      }\r\n      break\r\n\r\n    // If the cell contains an \"inline\" (not \"shared\") string.\r\n    case 'inlineStr':\r\n      value = getCellInlineStringValue(cellNode)\r\n      if (value === undefined) {\r\n        throw new Error(`Unsupported \"inline string\" cell value structure: ${cellNode.textContent}`)\r\n      }\r\n      value = value.trim()\r\n      if (value === '') {\r\n        value = undefined\r\n      }\r\n      break\r\n\r\n    // If the cell contains a \"shared\" string.\r\n    // \"Shared\" strings is a way for an Excel editor to reduce\r\n    // the file size by storing \"commonly used\" strings in a dictionary\r\n    // and then referring to such strings by their index in that dictionary.\r\n    case 's':\r\n      // If a cell has no value then there's no `<c/>` element for it.\r\n      // If a `<c/>` element exists then it's not empty.\r\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\r\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\r\n      value = values[parseInt(value)]\r\n      value = value.trim()\r\n      if (value === '') {\r\n        value = undefined\r\n      }\r\n      break\r\n\r\n    case 'b':\r\n      value = value === '1' ? true : false\r\n      break\r\n\r\n    // Stub: blank stub cell that is ignored by data processing utilities.\r\n    case 'z':\r\n      value = undefined\r\n      break\r\n\r\n    // Error: `value` is a numeric code.\r\n    // They also wrote: \"and `w` property stores its common name\".\r\n    // It's unclear what they meant by that.\r\n    case 'e':\r\n      value = decodeError(value)\r\n      break\r\n\r\n    // Date: a string to be parsed as a date.\r\n    // (usually a string in \"ISO 8601\" format)\r\n    case 'd':\r\n      if (value === undefined) {\r\n        break\r\n      }\r\n      value = new Date(value)\r\n      break\r\n\r\n    case 'n':\r\n      if (value === undefined) {\r\n        break\r\n      }\r\n      value = parseFloat(value)\r\n      // XLSX does have \"d\" type for dates, but it's not commonly used.\r\n      //  specific format for dates.\r\n      // Sometimes a date can be heuristically detected.\r\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\r\n      //\r\n      // Format IDs:\r\n      // https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\r\n      //\r\n      if (cellNode.hasAttribute('s')) {\r\n        const styleId = parseInt(cellNode.getAttribute('s'))\r\n        const style = styles[styleId]\r\n        if (!style) {\r\n          throw new Error(`Cell style not found: ${styleId}`)\r\n        }\r\n        if (BUILT_IN_DATE_NUMBER_FORMAT_IDS.indexOf(parseInt(style.numberFormat.id)) >= 0 ||\r\n          (options.dateFormat && style.numberFormat.template === options.dateFormat) ||\r\n          (options.smartDateParser !== false && style.numberFormat.template && isDateTemplate(style.numberFormat.template))) {\r\n          value = parseDate(value, properties)\r\n        }\r\n      }\r\n      break\r\n\r\n    default:\r\n      throw new TypeError(`Cell type not supported: ${type}`)\r\n  }\r\n\r\n  // Convert empty values to `null`.\r\n  if (value === undefined) {\r\n    value = null\r\n  }\r\n\r\n  return {\r\n    row: coords[0],\r\n    column: coords[1],\r\n    value\r\n  }\r\n}\r\n\r\nexport function dropEmptyRows(data, {\r\n  rowMap,\r\n  accessor = _ => _,\r\n  onlyTrimAtTheEnd\r\n} = {}) {\r\n  // Drop empty rows.\r\n  let i = data.length - 1\r\n  while (i >= 0) {\r\n    // Check if the row is empty.\r\n    let empty = true\r\n    for (const cell of data[i]) {\r\n      if (accessor(cell) !== null) {\r\n        empty = false\r\n        break\r\n      }\r\n    }\r\n    // Remove the empty row.\r\n    if (empty) {\r\n      data.splice(i, 1)\r\n      if (rowMap) {\r\n        rowMap.splice(i, 1)\r\n      }\r\n    } else if (onlyTrimAtTheEnd) {\r\n      break\r\n    }\r\n    i--\r\n  }\r\n  return data\r\n}\r\n\r\nexport function dropEmptyColumns(data, {\r\n  accessor = _ => _,\r\n  onlyTrimAtTheEnd\r\n} = {}) {\r\n  let i = data[0].length - 1\r\n  while (i >= 0) {\r\n    let empty = true\r\n    for (const row of data) {\r\n      if (accessor(row[i]) !== null) {\r\n        empty = false\r\n        break\r\n      }\r\n    }\r\n    if (empty) {\r\n      let j = 0;\r\n      while (j < data.length) {\r\n        data[j].splice(i, 1)\r\n        j++\r\n      }\r\n    } else if (onlyTrimAtTheEnd) {\r\n      break\r\n    }\r\n    i--\r\n  }\r\n  return data\r\n}\r\n\r\nfunction parseSheet(content, xml, values, styles, properties, options) {\r\n  const sheet = xml.createDocument(content)\r\n\r\n  let cells = getCells(sheet)\r\n\r\n  if (cells.length === 0) {\r\n    return { cells: [] }\r\n  }\r\n\r\n  cells = cells.map((node) => {\r\n    return Cell(node, sheet, xml, values, styles, properties, options)\r\n  })\r\n\r\n  let dimensions = getDimensions(sheet)\r\n  if (dimensions) {\r\n    dimensions = dimensions.split(':').map(CellCoords).map(([row, column]) => ({\r\n      row,\r\n      column\r\n    }))\r\n    // When there's only a single cell on a sheet\r\n    // there can sometimes be just \"A1\" for the dimensions string.\r\n    if (dimensions.length === 1) {\r\n      dimensions = [dimensions[0], dimensions[0]]\r\n    }\r\n  } else {\r\n    dimensions = calculateDimensions(cells)\r\n  }\r\n\r\n  return { cells, dimensions }\r\n}\r\n\r\nfunction parseValues(content, xml) {\r\n  if (!content) {\r\n    return []\r\n  }\r\n  return getSharedStrings(xml.createDocument(content))\r\n}\r\n\r\n// http://officeopenxml.com/SSstyles.php\r\n// Returns an array of cell styles.\r\n// A cell style index is its ID.\r\nfunction parseStyles(content, xml) {\r\n  if (!content) {\r\n    return {}\r\n  }\r\n\r\n  // https://social.msdn.microsoft.com/Forums/sqlserver/en-US/708978af-b598-45c4-a598-d3518a5a09f0/howwhen-is-cellstylexfs-vs-cellxfs-applied-to-a-cell?forum=os_binaryfile\r\n  // https://www.office-forums.com/threads/cellxfs-cellstylexfs.2163519/\r\n  const doc = xml.createDocument(content)\r\n\r\n  const baseStyles = getBaseStyles(doc)\r\n    .map(parseCellStyle)\r\n\r\n  const numberFormats = getNumberFormats(doc)\r\n    .map(parseNumberFormatStyle)\r\n    .reduce((formats, format) => {\r\n      // Format ID is a numeric index.\r\n      // There're some standard \"built-in\" formats (in Excel) up to about `100`.\r\n      formats[format.id] = format\r\n      return formats\r\n    }, [])\r\n\r\n  const getCellStyle = (xf) => {\r\n    if (xf.hasAttribute('xfId')) {\r\n      return {\r\n        ...baseStyles[xf.xfId],\r\n        ...parseCellStyle(xf, numberFormats)\r\n      }\r\n    }\r\n    return parseCellStyle(xf, numberFormats)\r\n  }\r\n\r\n  return getCellStyles(doc).map(getCellStyle)\r\n}\r\n\r\nfunction parseNumberFormatStyle(numFmt) {\r\n  return {\r\n    id: numFmt.getAttribute('numFmtId'),\r\n    template: numFmt.getAttribute('formatCode')\r\n  }\r\n}\r\n\r\n// http://www.datypic.com/sc/ooxml/e-ssml_xf-2.html\r\nfunction parseCellStyle(xf, numFmts) {\r\n  const style = {}\r\n  if (xf.hasAttribute('numFmtId')) {\r\n    const numberFormatId = xf.getAttribute('numFmtId')\r\n    // Built-in number formats don't have a `<numFmt/>` element in `styles.xml`.\r\n    // https://hexdocs.pm/xlsxir/number_styles.html\r\n    if (numFmts[numberFormatId]) {\r\n      style.numberFormat = numFmts[numberFormatId]\r\n    } else {\r\n      style.numberFormat = { id: numberFormatId }\r\n    }\r\n  }\r\n  return style\r\n}\r\n\r\n// I guess `xl/workbook.xml` file should always be present inside the *.xlsx archive.\r\nfunction parseProperties(content, xml) {\r\n  const book = xml.createDocument(content)\r\n\r\n  const properties = {};\r\n\r\n  // Read `<workbookPr/>` element to detect whether dates are 1900-based or 1904-based.\r\n  // https://support.microsoft.com/en-gb/help/214330/differences-between-the-1900-and-the-1904-date-system-in-excel\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/workbookPr.html\r\n\r\n  const workbookProperties = getWorkbookProperties(book)\r\n\r\n  if (workbookProperties && workbookProperties.getAttribute('date1904') === '1') {\r\n    properties.epoch1904 = true\r\n  }\r\n\r\n  // Get sheets info (indexes, names, if they're available).\r\n  // Example:\r\n  // <sheets>\r\n  //   <sheet\r\n  //     xmlns:ns=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\r\n  //     name=\"Sheet1\"\r\n  //     sheetId=\"1\"\r\n  //     ns:id=\"rId3\"/>\r\n  // </sheets>\r\n  // http://www.datypic.com/sc/ooxml/e-ssml_sheet-1.html\r\n\r\n  properties.sheets = []\r\n\r\n  const addSheetInfo = (sheet) => {\r\n    if (sheet.getAttribute('name')) {\r\n      properties.sheets.push({\r\n        id: sheet.getAttribute('sheetId'),\r\n        name: sheet.getAttribute('name'),\r\n        relationId: sheet.getAttribute('r:id')\r\n      })\r\n    }\r\n  }\r\n\r\n  getSheets(book).forEach(addSheetInfo)\r\n\r\n  return properties;\r\n}\r\n\r\n/**\r\n * Returns sheet file paths.\r\n * Seems that the correct place to look for the `sheetId` -> `filename` mapping\r\n * is `xl/_rels/workbook.xml.rels` file.\r\n * https://github.com/tidyverse/readxl/issues/104\r\n * @param  {string} content — `xl/_rels/workbook.xml.rels` file contents.\r\n * @param  {object} xml\r\n * @return {object}\r\n */\r\nfunction parseFilePaths(content, xml) {\r\n  // Example:\r\n  // <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\r\n  //   ...\r\n  //   <Relationship\r\n  //     Id=\"rId3\"\r\n  //     Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\"\r\n  //     Target=\"worksheets/sheet1.xml\"/>\r\n  // </Relationships>\r\n  const document = xml.createDocument(content)\r\n\r\n  const filePaths = {\r\n    sheets: {},\r\n    sharedStrings: undefined,\r\n    styles: undefined\r\n  }\r\n\r\n  const addFilePathInfo = (relationship) => {\r\n    const filePath = relationship.getAttribute('Target')\r\n    const fileType = relationship.getAttribute('Type')\r\n    switch (fileType) {\r\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles':\r\n        filePaths.styles = getFilePath(filePath)\r\n        break\r\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings':\r\n        filePaths.sharedStrings = getFilePath(filePath)\r\n        break\r\n      case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet':\r\n        filePaths.sheets[relationship.getAttribute('Id')] = getFilePath(filePath)\r\n        break\r\n    }\r\n  }\r\n\r\n  getRelationships(document).forEach(addFilePathInfo)\r\n\r\n  // Seems like \"sharedStrings.xml\" is not required to exist.\r\n  // For example, when the spreadsheet doesn't contain any strings.\r\n  // https://github.com/catamphetamine/read-excel-file/issues/85\r\n  // if (!filePaths.sharedStrings) {\r\n  //   throw new Error('\"sharedStrings.xml\" file not found in the *.xlsx file')\r\n  // }\r\n\r\n  return filePaths\r\n}\r\n\r\nfunction getFilePath(path) {\r\n  // Normally, `path` is a relative path inside the ZIP archive,\r\n  // like \"worksheets/sheet1.xml\", or \"sharedStrings.xml\", or \"styles.xml\".\r\n  // There has been one weird case when file path was an absolute path,\r\n  // like \"/xl/worksheets/sheet1.xml\" (specifically for sheets):\r\n  // https://github.com/catamphetamine/read-excel-file/pull/95\r\n  // Other libraries (like `xlsx`) and software (like Google Docs)\r\n  // seem to support such absolute file paths, so this library does too.\r\n  if (path[0] === '/') {\r\n    return path.slice('/'.length)\r\n  }\r\n  // // Seems like a path could also be a URL.\r\n  // // http://officeopenxml.com/anatomyofOOXML-xlsx.php\r\n  // if (/^[a-z]+\\:\\/\\//.test(path)) {\r\n  //   return path\r\n  // }\r\n  return 'xl/' + path\r\n}\r\n\r\nfunction isDateTemplate(template) {\r\n  const tokens = template.split(/\\W+/)\r\n  for (const token of tokens) {\r\n    if (['MM', 'DD', 'YY', 'YYYY'].indexOf(token) < 0) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction createSheetNotFoundError(sheet, sheets) {\r\n  const sheetsList = sheets && sheets.map((sheet, i) => `\"${sheet.name}\" (#${i + 1})`).join(', ')\r\n  return new Error(`Sheet ${typeof sheet === 'number' ? '#' + sheet : '\"' + sheet + '\"'} not found in the *.xlsx file.${sheets ? ' Available sheets: ' + sheetsList + '.' : ''}`)\r\n}\r\n\r\n// Decodes numeric error code to a string code.\r\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\nfunction decodeError(errorCode) {\r\n  // While the error values are determined by the application,\r\n  // the following are some example error values that could be used:\r\n  switch (errorCode) {\r\n    case 0x00:\r\n      return '#NULL!'\r\n    case 0x07:\r\n      return '#DIV/0!'\r\n    case 0x0F:\r\n      return '#VALUE!'\r\n    case 0x17:\r\n      return '#REF!'\r\n    case 0x1D:\r\n      return '#NAME?'\r\n    case 0x24:\r\n      return '#NUM!'\r\n    case 0x2A:\r\n      return '#N/A'\r\n    case 0x2B:\r\n      return '#GETTING_DATA'\r\n    default:\r\n      // Such error code doesn't exist. I made it up.\r\n      return `#ERROR_${errorCode}`\r\n  }\r\n}"],"file":"readXlsx.js"}