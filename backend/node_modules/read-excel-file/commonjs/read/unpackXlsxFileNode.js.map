{"version":3,"sources":["../../source/read/unpackXlsxFileNode.js"],"names":["unpackXlsxFile","input","entries","stream","Stream","fs","createReadStream","Promise","resolve","reject","entryPromises","on","pipe","unzip","Parse","all","then","entry","contents","push","data","toString","path"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACe,SAASA,cAAT,CAAwBC,KAAxB,EAA+B;AAC5C;AACA;AACA;AACA,MAAMC,OAAO,GAAG,EAAhB;AAEA,MAAMC,MAAM,GAAGF,KAAK,YAAYG,kBAAjB,GAA0BH,KAA1B,GAAkCI,eAAGC,gBAAH,CAAoBL,KAApB,CAAjD;AAEA,SAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,aAAa,GAAG,EAAtB;AAEAP,IAAAA,MAAM,CACJ;AADI,KAEHQ,EAFH,CAEM,OAFN,EAEeF,MAFf,EAGGG,IAHH,CAGQC,qBAAMC,KAAN,EAHR,EAIE;AAJF,KAKGH,EALH,CAKM,OALN,EAKeF,MALf,EAMGE,EANH,CAMM,OANN,EAMe;AAAA,aAAOJ,OAAO,CAACQ,GAAR,CAAYL,aAAZ,EAA2BM,IAA3B,CAAgC;AAAA,eAAMR,OAAO,CAACN,OAAD,CAAb;AAAA,OAAhC,CAAP;AAAA,KANf,EAOGS,EAPH,CAOM,OAPN,EAOe,UAACM,KAAD,EAAW;AACtB,UAAIC,QAAQ,GAAG,EAAf,CADsB,CAEtB;;AACAR,MAAAA,aAAa,CAACS,IAAd,CAAmB,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC1CS,QAAAA,KAAK,CACFN,EADH,CACM,MADN,EACc,UAAAS,IAAI;AAAA,iBAAIF,QAAQ,IAAIE,IAAI,CAACC,QAAL,EAAhB;AAAA,SADlB,EAEGV,EAFH,CAEM,KAFN,EAEa;AAAA,iBAAMH,OAAO,CAACN,OAAO,CAACe,KAAK,CAACK,IAAP,CAAP,GAAsBJ,QAAvB,CAAb;AAAA,SAFb;AAGD,OAJkB,CAAnB;AAKD,KAfH;AAgBD,GAnBM,CAAP;AAoBD","sourcesContent":["import fs from 'fs'\r\nimport Stream from 'stream'\r\nimport unzip from 'unzipper'\r\n\r\n/**\r\n * Reads XLSX file in Node.js.\r\n * @param  {(string|Stream)} input - A Node.js readable stream or a path to a file.\r\n * @return {Promise} Resolves to an object holding XLSX file entries.\r\n */\r\nexport default function unpackXlsxFile(input) {\r\n  // XLSX file is a zip archive.\r\n  // The `entries` object stores the files\r\n  // and their contents from this XLSX zip archive.\r\n  const entries = {}\r\n\r\n  const stream = input instanceof Stream ? input : fs.createReadStream(input)\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const entryPromises = []\r\n\r\n    stream\r\n      // This first \"error\" listener is for the original stream errors.\r\n      .on('error', reject)\r\n      .pipe(unzip.Parse())\r\n      // This second \"error\" listener is for the unzip stream errors.\r\n      .on('error', reject)\r\n      .on('close', () =>  Promise.all(entryPromises).then(() => resolve(entries)))\r\n      .on('entry', (entry) => {\r\n        let contents = ''\r\n        // To ignore an entry: `entry.autodrain()`.\r\n        entryPromises.push(new Promise((resolve) => {\r\n          entry\r\n            .on('data', data => contents += data.toString())\r\n            .on('end', () => resolve(entries[entry.path] = contents))\r\n        }))\r\n      })\r\n  })\r\n}\r\n"],"file":"unpackXlsxFileNode.js"}